{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusControl.js","pomodoro/BreakControl.js","pomodoro/TimerButtons.js","utils/class-names/index.js","pomodoro/SessionDisplay.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","FocusControl","focusDuration","handleFocusDecrease","handleFocusIncrease","session","className","data-testid","type","onClick","disabled","BreakControl","breakDuration","handleBreakDecrease","handleBreakIncrease","TimerButtons","classNameToBoolean","isTimerRunning","playPause","handleStop","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","SessionDisplay","ariaValue","label","toLowerCase","indexOf","substr","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setFocusDuration","setBreakDuration","setSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","rel","href","integrity","crossorigin","min","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.979b22dd.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\n export function minutesToDuration(givenMinutes) {\n    const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n    return `${minutes}:00`;\n  }\n  \n  /**\n   * Formats a number of seconds as 'mm:ss'.\n   *\n   * For example,\n   *    secondsToDuration(305) = '05:05'\n   *    secondsToDuration(930) = '15:30'\n   *\n   * @param givenSeconds\n   *    the number of seconds in the duration\n   * @returns {string}\n   *    the given seconds formatted as 'mm:ss'\n   */\n  \n  export function secondsToDuration(givenSeconds) {\n    const minutes = Math.floor((givenSeconds % 3600) / 60)\n      .toString()\n      .padStart(2, \"0\");\n    const seconds = Math.round(givenSeconds % 60)\n      .toString()\n      .padStart(2, \"0\");\n    return `${minutes}:${seconds}`;\n  }","import React from 'react';\nimport { minutesToDuration } from '../utils/duration';\n\nfunction FocusControl({ focusDuration, handleFocusDecrease, handleFocusIncrease, session }) {\n\n  return (\n    <div className=\"col\">\n    <div className=\"input-group input-group-lg mb-2\">\n      <span className=\"input-group-text\" data-testid=\"duration-focus\">\n        Focus Duration: {minutesToDuration(focusDuration)}\n      </span>\n      <div className=\"input-group-append\">\n        {/* Decreases focus duration by 5 minutes */}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"decrease-focus\"\n          onClick={handleFocusDecrease}\n          disabled={focusDuration === 5 || !!session}\n        >\n          <span className=\"oi oi-minus\" />\n        </button>\n        {/* Increases Focus session by 5 minutes */}\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          data-testid=\"increase-focus\"\n          onClick={handleFocusIncrease}\n          disabled={focusDuration === 60 || !!session}\n        >\n          <span className=\"oi oi-plus\" />\n        </button>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default FocusControl;","import React from 'react';\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction BreakControl({ breakDuration, handleBreakDecrease, handleBreakIncrease, session }) {\n\n  return (\n    <div className=\"col\">\n      <div className=\"float-right\">\n        <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\n            Break Duration: {minutesToDuration(breakDuration)}\n          </span>\n          <div className=\"input-group-append\">\n           {/* Increases the break duration by one minute*/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"decrease-break\"\n              onClick={handleBreakDecrease}\n              disabled={breakDuration === 1 || !!session}\n            >\n              <span className=\"oi oi-minus\" />\n            </button>\n            {/* Decreases the break duration by one minute */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"increase-break\"\n              onClick={handleBreakIncrease}\n              disabled={breakDuration === 15 || !!session}\n            >\n              <span className=\"oi oi-plus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BreakControl;","import React from 'react';\nimport classNames from \"../utils/class-names\";\n\nfunction TimerButtons({ isTimerRunning, session, playPause, handleStop }) {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !isTimerRunning,\n                \"oi-media-pause\": isTimerRunning,\n              })}\n            />\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"stop\"\n            title=\"Stop the session\"\n            onClick={handleStop}\n            disabled={!session}\n          >\n            <span className=\"oi oi-media-stop\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimerButtons;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\n export default function classNames(classNameToBoolean) {\n    return Object.entries(classNameToBoolean)\n      .reduce(\n        (classes, [className, value]) =>\n          classes.concat(value ? className : undefined),\n        []\n      )\n      .filter((className) => className !== undefined)\n      .join(\" \");\n  }\n  ","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\n\nfunction SessionDisplay({ ariaValue, session, focusDuration, breakDuration}) {\n  \n // will display during a focus or break session\n  return( session &&\n    <div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <h2 data-testid=\"session-title\">\n            {session && session.label} for {(\"0\" + (session.label.toLowerCase().indexOf(\"ocus\") > 0 ? focusDuration : breakDuration)).substr(-2)}:00 minutes\n          </h2>\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(session.timeRemaining)} remaining\n          </p>\n        </div>\n      </div>\n      {/* progress bar */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={ariaValue()\n              }\n              style={{\n                width: `${ariaValue()}%` \n              }}\n            />\n          </div>\n        </div>\n      </div>\n     </div>\n   \n  );\n}\n\nexport default SessionDisplay;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusControl from \"./FocusControl\";\nimport BreakControl from \"./BreakControl\";\nimport TimerButtons from \"./TimerButtons\";\nimport SessionDisplay from \"./SessionDisplay\";\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n    const [isTimerRunning, setIsTimerRunning] = useState(false);\n    const [focusDuration, setFocusDuration] = useState(25);\n    const [breakDuration, setBreakDuration] = useState(5);\n    const [session, setSession] = useState(null);\n  \n    \n    const handleFocusDecrease = () => {\n      setFocusDuration(Math.max(5, focusDuration - 5));\n    };\n    const handleFocusIncrase = () => {\n      setFocusDuration(Math.min(60, focusDuration + 5));\n    };\n  \n    const handleBreakDecrease = () => {\n      setBreakDuration(Math.max(1, breakDuration - 1));\n    };\n    const handleBreakIncrease = () => {\n      setBreakDuration(Math.min(15, breakDuration + 1));\n    };\n  \n    const handleStop = () => {\n      setIsTimerRunning(false);\n      setSession(null);\n    }\n  \n    /**\n     * Custom hook that invokes the callback function every second\n     *\n     * NOTE: You will not need to make changes to the callback function\n     */\n    useInterval(() => {\n        if (session.timeRemaining === 0) {\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n          return setSession(nextSession(focusDuration, breakDuration));\n        }\n        return setSession(nextTick);\n      \n      },\n      isTimerRunning ? 1000 : null\n    );\n  \n    /**\n     * Called whenever the play/pause button is clicked.\n     */\n    function playPause() {\n      setIsTimerRunning((prevState) => {\n        const nextState = !prevState;\n        if (nextState) {\n          setSession((prevStateSession) => {\n            // If the timer is starting and the previous session is null,\n            // start a focusing session.\n            if (prevStateSession === null) {\n              return {\n                label: \"Focusing\",\n                timeRemaining: focusDuration * 60,\n              };\n            }\n            return prevStateSession;\n          });\n        }\n        return nextState;\n      });\n    }\n  \n    //value for progress bar percentage\n     function ariaValue(){\n       if(!session) return null;\n       if(session.label === \"Focusing\") return 100 - (((session.timeRemaining)/(focusDuration*60)) * 100);\n       else return 100 - (((session.timeRemaining)/(breakDuration*60)) * 100);\n    }\n    \n    return (\n      <div className=\"pomodoro\">\n        <link\n        rel=\"stylesheet\"\n        href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\n        integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\n        crossorigin=\"anonymous\"\n      />\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/open-iconic/1.1.1/font/css/open-iconic-bootstrap.min.css\"\n        integrity=\"sha512-UyNhw5RNpQaCai2EdC+Js0QL4RlVmiq41DkmCJsRV3ZxipG2L0HhTqIf/H9Hp8ez2EnFlkBnjRGJU2stW3Lj+w==\"\n        crossorigin=\"anonymous\"\n      />\n         <div className=\"row\">\n          \n          <FocusControl handleFocusDecrease={handleFocusDecrease}\n          focusDuration={focusDuration}\n          handleFocusIncrease={handleFocusIncrase} \n          session={session}\n          />\n          <BreakControl handleBreakDecrease={handleBreakDecrease}\n          breakDuration={breakDuration}\n          handleBreakIncrease={handleBreakIncrease}\n          session={session}\n          />  \n        </div>\n  \n        <div>\n          <TimerButtons isTimerRunning={isTimerRunning}\n            playPause={playPause} \n            session={session}\n            handleStop={handleStop}\n          />\n          <SessionDisplay session={session}\n            focusDuration={focusDuration}\n            breakDuration={breakDuration}\n            ariaValue={ariaValue}\n          />\n          </div>\n       </div>\n    );\n  }\n  \n  export default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}